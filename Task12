main.tf
provider "aws" {
  region = "ap-southeast-2"
}

# Fetch default VPC
data "aws_vpc" "default" {
  default = true
}

# Fetch all subnets in default VPC
data "aws_subnets" "default_vpc_subnets" {
  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.default.id]
  }
}

# Get info for each subnet
data "aws_subnet" "subnet_info" {
  for_each = toset(data.aws_subnets.default_vpc_subnets.ids)
  id       = each.key
}

# Local: Subnet IDs for each AZ
locals {
  subnet_ids_by_az = {
    "ap-southeast-2a" = one([
      for s in data.aws_subnet.subnet_info : s.id if s.availability_zone == "ap-southeast-2a"
    ])
    "ap-southeast-2b" = one([
      for s in data.aws_subnet.subnet_info : s.id if s.availability_zone == "ap-southeast-2b"
    ])
    "ap-southeast-2c" = one([
      for s in data.aws_subnet.subnet_info : s.id if s.availability_zone == "ap-southeast-2c"
    ])
  }
}

# Get latest Amazon Linux 2 AMI
data "aws_ssm_parameter" "amazon_linux_2" {
  name = "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
}

# Create EC2 Instances in each AZ
resource "aws_instance" "server1a" {
  ami           = data.aws_ssm_parameter.amazon_linux_2.value
  instance_type = "t2.micro"
  subnet_id     = local.subnet_ids_by_az["ap-southeast-2a"]
  key_name      = var.key_name

  tags = {
    Name = "server1a"
  }
}

resource "aws_instance" "server1b" {
  ami           = data.aws_ssm_parameter.amazon_linux_2.value
  instance_type = "t2.micro"
  subnet_id     = local.subnet_ids_by_az["ap-southeast-2b"]
  key_name      = var.key_name

  tags = {
    Name = "server1b"
  }
}

resource "aws_instance" "server1c" {
  ami           = data.aws_ssm_parameter.amazon_linux_2.value
  instance_type = "t2.micro"
  subnet_id     = local.subnet_ids_by_az["ap-southeast-2c"]
  key_name      = var.key_name

  tags = {
    Name = "server1c"
  }
}

#########################################################

variables.tf

variable "key_name" {
  default = "your-key-name"  # Replace with your real key pair name
}

###############################################

outputs.tf

output "server1a_public_ip" {
  value = aws_instance.server1a.public_ip
}

output "server1b_public_ip" {
  value = aws_instance.server1b.public_ip
}

output "server1c_public_ip" {
  value = aws_instance.server1c.public_ip
}


